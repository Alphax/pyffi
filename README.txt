Installation
------------

python setup.py install

Overview
--------

The general philosophy of this library is to supply all information
that comes naturally from the files, and nothing more. For very common
calculations, we might add some functions to it, to make life easier
for importers and exporters.

To use the library, the cgf.xml file (for example) should reside either in
the module directory (following the current layout on svn), or you
should set the CGFXMLPATH environment variable to the directory where
cgf.xml can be found. If CGFXMLPATH is set, the library will first
look there. The same applies to all other formats.

The code is organized as follows.

* Python File Format Interface - representing a file format specified by an XML
  file in Python

  - PyFFI/__init__.py

    Contains the main metaclass which generates classes for each type
    defined in the XML.

  - PyFFI/XmlHandler.py

    The XML handler, contains the core code that transforms the XML
    file into classes. The parser code is based on NifSkope's XML
    parser (see http://niftools.sourceforge.net).

  - PyFFI/Bases/*

    All base classes for various classes generated by the
    XmlFileFormat metaclass, i.e. basic and struct. Also contains
    the implementation of array's and the expression parser.

* CGF Format Library - instanciates classes, and customize them

  - PyFFI/CGF/__init__.py: instanciates classes for the CGF format

  - PyFFI/CGF/*.py: customization of particular blocks

* NIF Format Library - similar to CGF

* Utilities

  - PyFFI/Utils/__init__.py: collection of random small utilities

    + hexDump: dump file chunk in hexadecimal format

    + walk: a variant of os.walk()

    + PyTriStrip: stripifier utilities (uses a Python port of NvTriStrip)

The following code resides in the subversion trunk only
(https://pyffi.svn.sf.net/svnroot/pyffi/trunk) and is not distributed
with the library.

* tests

  - rundoctest.py: runs all tests in the documentation

* examples

  - examples/metaclass_simple.py

    Proof of concept of how classes can be generated from an xml
    description. I keep it there as it could be useful to get a quick
    idea of how the XML is converted to a bunch of classes.

* www

  - script for generating epydoc documentation

