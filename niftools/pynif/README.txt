The general philosophy of this library is to supply all information
that comes naturally from the files, and nothing more. For very common
calculations, we might add some functions to it, to make life easier
for importers and exporters.

To use the library, note that the nif.xml file should reside either in
the NifFormat directory (following the current layout on svn), or you
should set the NIFXMLPATH environment variable to th directory where
nif.xml can be found. If NIFXMLPATH is set, the library will first
look there.

The python files are organized as follows.

* tests

  - runtest.py: an example of how to use the library

  - rundoctest.py: runs all examples from the docstrings; used for
    quality control

  - runprofile.py: runs the profiler, gives an idea of bottlenecks in
    the code; used for optimization

  - runreadtest.py: reads all nif files recursively from a base directory

  - runreadprofile.py: like runreadtest.py but also provides
    profiling information

  - runreadwritetest.py: like runreadtest.py but also writes back every file
    and checks if the file size is the same

* examples

  - examples/metaclass_simple.py

    Proof of concept of how classes could be generated from an xml
    description. I keep it there as it could be useful to get a quick
    idea of how the XML is converted to a bunch of classes.

* File Format Library - representing a file format specified by an XML
  file in Python

  - FileFormat/XmlFileFormat.py

    Contains the main metaclass which generates classes for each block
    and compound type.

  - FileFormat/XmlHandler.py

    The XML handler, contains the core code that transforms the XML
    file into classes. The parser code is based on NifSkope's XML
    parser.

  - FileFormat/Bases/*

    All base classes for various classes generated by the
    XmlFileFormat metaclass, i.e. basic and compound. Also contains
    the implementation of array's and the expression parser.

* NIF Format Library - instanciates classes, and customize them

  - NifFormat/NifFormat.py: instanciates classes for the NIF format

  - NifFormat/BasicTypes.py: python implementation of the basic types,
    in accordance with FileFormat/Bases/Basic.py

  - NifFormat/KfmFormat.py: instanciates classes for the KFM format (TODO)

  - NifFormat/Ni*.py: customization of particular blocks
