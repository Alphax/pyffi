PyFFI is an open source Python library for processing block structured
binary files.

The Python File Format Interface aims to make it easy to manipulate
binary files in a Python environment. Starting from a file format
description written in XML, PyFFI creates customizable Python classes
to read and write file blocks as described by the XML. Currently,
PyFFI supports the NetImmerse/Gamebryo NIF and KFM formats,
CryTek's CGF format, the DDS format, and the TGA format. Many tools
for files used by 3D games, such as a stripifier, and a tangent space
calculator, are included in PyFFI as well.

PyFFI's highly modular design make it easy to implement support for both
new formats and also to extend existing functionality.

QSkope is PyFFI's graphical user interface, and enables simple editing
of files in any file format supported by PyFFI. QSkope depends on PyQt4,
which you can download from

http://www.riverbankcomputing.co.uk/software/pyqt/download

Overview
--------

The general philosophy of the library is to supply all information
that comes naturally from files. For very common calculations, extra
functions are available, to make life easier for importers and
exporters. Very specialized functions are implemented as tools
(typically, as scripts or spells) rather than as class methods.

If you are developing a particular file format, then you can specify
an alternate location of your xml file, for instance cgf.xml,
by setting the CGFXMLPATH environment variable to the directory where
cgf.xml can be found. If CGFXMLPATH is set, the library will first
look there. The same applies to all other formats.

The code is organized as follows.

* Python File Format Interface - representing a file format specified by an XML
  file in Python

  - PyFFI/__init__.py

    Contains the main metaclass which generates classes for each type
    defined in the XML.

  - PyFFI/XmlHandler.py

    The XML handler, contains the core code that transforms the XML
    file into classes. The parser code is based on NifSkope's XML
    parser (see http://niftools.sourceforge.net).

  - PyFFI/Bases/*

    All base classes for various classes generated by the
    XmlFileFormat metaclass, i.e. basic and struct. Also contains
    the implementation of array's and the expression parser.

* CGF Format Library - instanciates classes, and customize them

  - PyFFI/Formats/CGF/__init__.py: instanciates classes for the CGF format

  - PyFFI/Formats/CGF/*.py: customization of particular blocks

* NIF, KFM, TGA, and DDS Format Library - similar to CGF

* Utilities

  - PyFFI/Utils/__init__.py: collection of random small utilities

    + hexDump: dump file chunk in hexadecimal format

    + walk: a variant of os.walk()

    + TriStrip: stripifier utilities (uses a Python port of NvTriStrip)

    + MathUtils: common vector and matrix operations

    + QuickHull: a simple implementation of the 2d and 3d quick hull
      algorithms

    + Inertia: a library for calculating mass, center of gravity, and inertia
      tensor of common shapes

  - PyFFI/Spells/NIF and PyFFI/Spells/CGF: format specific helper modules

  - PyFFI/QSkopeLib: modules used by QSkope (PyFFI's GUI application)

  - scripts/NIF, scripts/CGF, ...: format specific scripts

    + niftoaster, cgftoaster, ...: for hacking files with spells

    + ffvt3rskinpartition: skin partition calculator for Freedom Force vs. The
      3rd Reich

    + nifmakehsl: create hex workshop structure libraries for all nif formats

    + nifoptimize: remove redundant vertices and restripify nif files

* Documentation - generated by epydoc

  - docs/...

* Test files

  - tests/...

* examples

  - examples/simple

    Simple example on how to implement a new format.

  - examples/metaclasses/howto_generate_class_from_xml.py

    Proof of concept of how classes can be generated from an xml
    description. I keep it there as it could be useful to get a quick
    idea of how the XML is converted to a bunch of classes.

The following code resides in the subversion trunk only
(https://pyffi.svn.sf.net/svnroot/pyffi/trunk) and is not distributed
with the library.

* various scripts

  - rundoctest.py: runs all tests in the documentation

  - makezip.sh: script which creates the distribution packages

  - pylintrc: pylint configuration file

