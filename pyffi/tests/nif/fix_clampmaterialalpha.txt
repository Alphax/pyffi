Doctests for the fix_texturepath spell
======================================

NifToaster check
----------------

>>> import sys
>>> sys.path.append("scripts/NIF")
>>> import niftoaster
>>> sys.argv = ["niftoaster.py", "fix_clampmaterialalpha", "--dry-run", "--noninteractive", "tests/nif/test_fix_clampmaterialalpha.nif"]
>>> niftoaster.NifToaster().cli()
=== tests/nif/test_fix_clampmaterialalpha.nif ===
  --- fix_clampmaterialalpha ---
    ~~~ NiNode [Scene Root] ~~~
      ~~~ NiNode [Cone] ~~~
        ~~~ NiTriShape [Tri Cone 0] ~~~
          ~~~ NiMaterialProperty [Red] ~~~
            clamping alpha value (1000.000000 -> 1.0)
        ~~~ NiTriShape [Tri Cone 1] ~~~
          ~~~ NiMaterialProperty [Green] ~~~
            clamping alpha value (-1000.000000 -> 0.0)
        ~~~ NiTriShape [Tri Cone 2] ~~~
          ~~~ NiMaterialProperty [Blue] ~~~
        ~~~ NiTriShape [Tri Cone 3] ~~~
          ~~~ NiMaterialProperty [Yellow] ~~~
  writing to temporary file
Finished.

Explicit check
--------------

>>> from PyFFI.Formats.NIF import NifFormat
>>> from PyFFI.Spells.NIF import fix
>>> from PyFFI.Spells import Toaster
>>> data = NifFormat.Data()
>>> stream = open("tests/nif/test_fix_clampmaterialalpha.nif", "rb")
>>> data.read(stream)
>>> # check that material alpha is out of range
>>> data.roots[0].children[0].children[0].properties[0].alpha > 1.01
True
>>> data.roots[0].children[0].children[1].properties[0].alpha < -0.01
True
>>> # run the spell that fixes this
>>> spell = fix.SpellClampMaterialAlpha(data=data)
>>> spell.recurse()
>>> # check that material alpha are no longer out of range
>>> "%.3f" % data.roots[0].children[0].children[0].properties[0].alpha
'1.000'
>>> "%.3f" % data.roots[0].children[0].children[1].properties[0].alpha
'0.000'
