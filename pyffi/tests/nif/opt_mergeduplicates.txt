Doctests for the opt_mergeduplicates spell
==========================================

NifToaster check
----------------

>>> import sys
>>> sys.path.append("scripts/NIF")
>>> import niftoaster
>>> sys.argv = ["niftoaster.py", "opt_mergeduplicates", "--dry-run", "--noninteractive", "tests/nif/test_opt_mergeduplicates.nif"]
>>> niftoaster.NifToaster().cli()
=== tests/nif/test_opt_mergeduplicates.nif ===
  --- opt_mergeduplicates ---
    ~~~ NiNode [Scene Root] ~~~
      ~~~ NiVertexColorProperty [] ~~~
      ~~~ NiZBufferProperty [] ~~~
      ~~~ NiStencilProperty [] ~~~
      ~~~ NiDitherProperty [] ~~~
      ~~~ NiNode [Cone] ~~~
        ~~~ NiZBufferProperty [] ~~~
          removing duplicate branch
        ~~~ NiVertexColorProperty [] ~~~
          removing duplicate branch
        ~~~ NiStencilProperty [] ~~~
          removing duplicate branch
        ~~~ NiDitherProperty [] ~~~
          removing duplicate branch
        ~~~ NiTriStrips [Tri Cone 0] ~~~
          ~~~ NiTexturingProperty [] ~~~
            ~~~ NiSourceTexture [] ~~~
          ~~~ NiMaterialProperty [Red] ~~~
          ~~~ NiSpecularProperty [] ~~~
          ~~~ NiTriStripsData [] ~~~
        ~~~ NiTriStrips [Tri Cone 1] ~~~
          ~~~ NiTexturingProperty [] ~~~
            removing duplicate branch
          ~~~ NiMaterialProperty [Red] ~~~
            removing duplicate branch
          ~~~ NiSpecularProperty [] ~~~
            removing duplicate branch
          ~~~ NiAlphaProperty [] ~~~
          ~~~ NiTriStripsData [] ~~~
        ~~~ NiTriStrips [Tri Cone 2] ~~~
          ~~~ NiTexturingProperty [] ~~~
            removing duplicate branch
          ~~~ NiMaterialProperty [Red] ~~~
            removing duplicate branch
          ~~~ NiWireframeProperty [] ~~~
          ~~~ NiAlphaProperty [] ~~~
            removing duplicate branch
          ~~~ NiTriStripsData [] ~~~
        ~~~ NiTriStrips [Tri Cone 3] ~~~
          ~~~ NiTexturingProperty [] ~~~
            removing duplicate branch
          ~~~ NiMaterialProperty [Red] ~~~
            removing duplicate branch
          ~~~ NiWireframeProperty [] ~~~
            removing duplicate branch
          ~~~ NiDitherProperty [] ~~~
            removing duplicate branch
          ~~~ NiTriStripsData [] ~~~
  writing to temporary file
Finished.
>>> sys.argv = ["niftoaster.py", "opt_mergeduplicates", "--dry-run", "--noninteractive", "tests/nif/test_opt_dupgeomdata.nif"]
>>> niftoaster.NifToaster().cli()
=== tests/nif/test_opt_dupgeomdata.nif ===
  --- opt_mergeduplicates ---
    ~~~ NiNode [Scene Root] ~~~
      ~~~ NiNode [Cube1] ~~~
        ~~~ NiTriShape [Tri Cube1] ~~~
          ~~~ NiTriShapeData [] ~~~
        ~~~ NiNode [Cube2] ~~~
          ~~~ NiTriShape [Tri Cube2] ~~~
            ~~~ NiTriShapeData [] ~~~
              removing duplicate branch
          ~~~ NiNode [Cube3] ~~~
            ~~~ NiTriShape [Tri Cube3] ~~~
              ~~~ NiTriShapeData [] ~~~
                removing duplicate branch
            ~~~ NiTriShape [Cube4] ~~~
              ~~~ NiTriShapeData [] ~~~
                removing duplicate branch
  writing to temporary file
Finished.

Explicit check
--------------

>>> def has_duplicates(root):
...     for branch in root.tree():
...         for otherbranch in root.tree():
...             if (branch is not otherbranch
...                 and branch.isInterchangeable(otherbranch)):
...                 return True
...     return False
>>> from PyFFI.Formats.NIF import NifFormat
>>> import PyFFI.Spells.NIF.optimize
>>> from PyFFI.Spells import Toaster
>>> data = NifFormat.Data()
>>> stream = open("tests/nif/test_opt_mergeduplicates.nif", "rb")
>>> data.read(stream)
>>> # check that there are duplicates
>>> has_duplicates(data.roots[0])
True
>>> # run the spell that fixes this
>>> spell = PyFFI.Spells.NIF.optimize.SpellMergeDuplicates(data=data)
>>> spell.recurse()
>>> # check that there are no more duplicates
>>> has_duplicates(data.roots[0])
False
