Doctests for the optimize spell
===============================

Interactive
-----------

>>> # this inputfunc hack is very ugly but it allows to simulate user input
>>> inputlist = ["yes it is", "n", "y"] # list of inputs of this test
>>> def inputfunc(msg = ""):
...     result = inputlist.pop(0)
...     print("%s%s" % (msg, result))
...     return result
>>> inputfunc("is the input working? ")
is the input working? yes it is
'yes it is'
>>> import PyFFI.Spells
>>> PyFFI.Spells.testPath.func_globals['raw_input'] = inputfunc
>>> # copy file to avoid overwriting
>>> import shutil
>>> shutil.copyfile("tests/nif/test.nif", "tests/nif/_test.nif")
>>> # simulate calling "niftoaster.py optimize --verbose=99 tests/nif/_test.nif"
>>> import sys
>>> sys.path.append("scripts/NIF")
>>> import niftoaster
>>> sys.argv = ["niftoaster.py", "optimize", "--verbose=99", "tests/nif/_test.nif"]
>>> niftoaster.main() # doctest: +ELLIPSIS
This script will modify your files, in particular if something goes wrong it
may destroy them. Make a backup of your files before running this script.
<BLANKLINE>
Are you sure that you want to proceed? [n/y] n
Script aborted by user.
Finished.
>>> niftoaster.main() # doctest: +ELLIPSIS
This script will modify your files, in particular if something goes wrong it
may destroy them. Make a backup of your files before running this script.
<BLANKLINE>
Are you sure that you want to proceed? [n/y] y
reading tests/nif/_test.nif
checking for duplicate source textures
checking for duplicate properties
optimizing geometries
optimizing block 'Cube'
  removing duplicate vertices
  (num vertices was 8 and is now 8)
  stripifying
  (average strip length is 8.157895)
  average strip length less than 10.000000 so triangulating
  writing tests/nif/_test.nif...
Finished.
>>> # clean up
>>> import os
>>> os.remove("tests/nif/_test.nif")

Non-interactive
---------------

>>> # copy file to avoid overwriting
>>> import shutil
>>> shutil.copyfile("tests/nif/test.nif", "tests/nif/_test.nif")
>>> # simulate calling "niftoaster.py optimize --verbose=99 tests/nif/_test.nif"
>>> import sys
>>> sys.path.append("scripts/NIF")
>>> import niftoaster
>>> sys.argv = ["niftoaster.py", "optimize", "--noninteractive", "--verbose=99", "tests/nif/_test.nif"]
>>> niftoaster.main() # doctest: +ELLIPSIS
reading tests/nif/_test.nif
checking for duplicate source textures
checking for duplicate properties
optimizing geometries
optimizing block 'Cube'
  removing duplicate vertices
  (num vertices was 8 and is now 8)
  stripifying
  (average strip length is 8.157895)
  average strip length less than 10.000000 so triangulating
  writing tests/nif/_test.nif...
Finished.
>>> # clean up
>>> import os
>>> os.remove("tests/nif/_test.nif")

