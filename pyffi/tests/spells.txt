This file contains doctests for the PyFFI.Spells module.

Test --examples switch
----------------------

>>> import sys
>>> sys.path.append("scripts/NIF")
>>> import niftoaster
>>> sys.argv = ["niftoaster.py", "--examples"]
>>> niftoaster.main()
* check if PyFFI can read all files in current directory
  (python version of nifskope's xml checker):
<BLANKLINE>
    python niftoaster.py read .
<BLANKLINE>
* merge skeleton roots and rest positions for all files in current directory:
<BLANKLINE>
    python niftoaster.py mergeskelandrestpos .
<BLANKLINE>
* scale all files in c:\zoo2 by a factor 100 - useful to
  visualize nif files from games such as Zoo Tycoon 2 that are otherwise too
  small to show up properly in nifskope:
<BLANKLINE>
    python niftoaster.py -a 100 scale "c:\zoo2"
<BLANKLINE>
* same as above, but also find out profile information on reading nif
  files:
<BLANKLINE>
    python -m cProfile -s cumulative -o profile_read.txt niftoaster.py read .
<BLANKLINE>
* find out time spent on a particular test:
<BLANKLINE>
    python -m cProfile -s cumulative niftoaster.py tristrip

Test --spells switch
--------------------

>>> import sys
>>> sys.path.append("scripts/NIF")
>>> import niftoaster
>>> sys.argv = ["niftoaster.py", "--spells"]
>>> niftoaster.main()
checkbhkbodycenter
checkcenterradius
checkconvexshape
checkmopp
checkskincenterradius
checkskinpartition
checktangentspace
checktristrip
dump
exportpixeldata
hackcheckskindata
hackmultiskelroot
hackskindataidtransform
hackskinrestpose
mergeskelandrestpos
optimize
read
readwrite
scale
updatecenterradius
updatemopp
updateskinpartition

Test the readwrite spell
------------------------

>>> import sys
>>> sys.path.append("scripts/NIF")
>>> import niftoaster
>>> sys.argv = ["niftoaster.py", "--verbose=99", "readwrite", "tests/nif/"]
>>> niftoaster.main() # doctest: +ELLIPSIS
Traceback (most recent call last):
    ...
NifError: unknown block type 'NiInvalid!'
>>> sys.argv = ["niftoaster.py", "--verbose=99", "--usetheforceluke", "readwrite", "tests/nif/"]
>>> niftoaster.main() # doctest: +ELLIPSIS
reading tests/nif/invalid.nif
Warning: read failed due to either a corrupt file, a corrupt xml, or a bug.
reading tests/nif/test.nif
  writing to temporary file...
Finished.


Test nifoptimize
----------------

Interactive test:

>>> # this inputfunc hack is very ugly but it allows to simulate user input
>>> inputlist = ["yes it is", "n", "y"] # list of inputs of this test
>>> def inputfunc(msg = ""):
...     result = inputlist.pop(0)
...     print("%s%s" % (msg, result))
...     return result
>>> inputfunc("is the input working? ")
is the input working? yes it is
'yes it is'
>>> import PyFFI.Spells
>>> PyFFI.Spells.testPath.func_globals['raw_input'] = inputfunc
>>> # copy file to avoid overwriting
>>> import shutil
>>> shutil.copyfile("tests/nif/test.nif", "tests/nif/_test.nif")
>>> # simulate calling "nifoptimize.py --verbose=99 tests/nif/_test.nif"
>>> import sys
>>> sys.path.append("scripts/NIF")
>>> import nifoptimize
>>> sys.argv = ["nifoptimize.py", "--verbose=99", "tests/nif/_test.nif"]
>>> nifoptimize.main() # doctest: +ELLIPSIS
This script will modify your files, in particular if something goes wrong it
may destroy them. Make a backup of your files before running this script.
<BLANKLINE>
Are you sure that you want to proceed? [n/y] n
Script aborted by user.
Finished.
>>> nifoptimize.main() # doctest: +ELLIPSIS
This script will modify your files, in particular if something goes wrong it
may destroy them. Make a backup of your files before running this script.
<BLANKLINE>
Are you sure that you want to proceed? [n/y] y
reading tests/nif/_test.nif
checking for duplicate source textures
checking for duplicate properties
optimizing geometries
optimizing block 'Cube'
  removing duplicate vertices
  (num vertices was 8 and is now 8)
  stripifying
  (average strip length is 8.894737)
  average strip length less than 10.000000 so triangulating
  writing tests/nif/_test.nif...
Finished.
>>> # clean up
>>> import os
>>> os.remove("tests/nif/_test.nif")

Non-interactive test:

>>> # copy file to avoid overwriting
>>> import shutil
>>> shutil.copyfile("tests/nif/test.nif", "tests/nif/_test.nif")
>>> # simulate calling "nifoptimize.py --verbose=99 tests/nif/_test.nif"
>>> import sys
>>> sys.path.append("scripts/NIF")
>>> import nifoptimize
>>> sys.argv = ["nifoptimize.py", "--noninteractive", "--verbose=99", "tests/nif/_test.nif"]
>>> nifoptimize.main() # doctest: +ELLIPSIS
reading tests/nif/_test.nif
checking for duplicate source textures
checking for duplicate properties
optimizing geometries
optimizing block 'Cube'
  removing duplicate vertices
  (num vertices was 8 and is now 8)
  stripifying
  (average strip length is 8.894737)
  average strip length less than 10.000000 so triangulating
  writing tests/nif/_test.nif...
Finished.
>>> # clean up
>>> import os
>>> os.remove("tests/nif/_test.nif")

